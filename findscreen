#! /bin/bash
source common.sh

show_help() {
	echo "usage: findscreen [-l] screen video..."
	echo "options:"
	echo "    -l, --limit"
	echo "        position (seconds) in video to stop searching for screen"
}

tmp_path="/var/tmp/findscreen"
limit=200

while true; do
	case "$1" in
		-l|--search-limit)
			shift
			limit="$1"
			shift;;
		-v|--version)
			echo "$VERSION"
			exit;;
		-h|--help)
			show_help
			exit;;
		-*)
			echo "findscreen: unrecognized command $1" >&2
			exit -1;;
		*)
			break;;
	esac
done

COMPAREIMG="$1"
shift
INFILES=("$@")
if [[ $limit == *[!0-9]* ]]; then
	echo "findscreen: bad limit"
	exit -1
fi

if [ ! -f "$COMPAREIMG" ] ; then
	echo "findscreen: screen doesn't exist"
	exit -1
fi

if [ -d "$tmp_path" ]; then
	rm -rf "$tmp_path/*.bmp"
else
	mkdir "$tmp_path"
fi
if [ ! -d "$tmp_path" ]; then
	echo "findscreen: temporary path could not be created"
	exit -1
fi

i=1

for INFILE in "${INFILES[@]}"; do
	printf "$INFILE:"
	ffmpeg -i "$INFILE" -vf select='eq(pict_type\,I)' -vsync 2 -f image2 "$tmp_path/%05d.bmp" -loglevel debug 2>&1 | awk '{ if ($10 == "pict_type:I" || $9 == "pict_type:I") print substr($6,3); fflush(stdout)}' | while read timestamp; do
		if (( $(echo "$timestamp > $limit" | bc -l) )); then
			break
		fi
	#	list=("$TARGETPATH/$ID"-*.bmp)
	#	length=${#list[@]}
	#	last_pos=$((length - 1))
	#	second_last_pos=$((length - 2))
	#	last=${list[${last_pos}]}
	#	second_last=${list[${second_last_pos}]}
		#echo last=$last, second_last=$second_last
	#	file=$last
		#mv -v "$file" "$TARGETPATH/$last_timestamp.bmp"
		file="$(printf $tmp_path/%05d.bmp $i)"
		imghash="$(./hashcompare.py $COMPAREIMG $file | cut -d':' -f2)"
		printf "%05d:%s:%02d\n" $i $timestamp $imghash
		last_timestamp=$timestamp
		let i=i+1
	done | sort -t ":" -n -k 3 | head -n1
#	ffmpeg -ss $(convertsecs $timestamp) -i "$INFILE" -y -f image2 -vcodec mjpeg -vframes 1 $TARGETPATH/$(basename -z -s .mkv $(basename -z "$INFILE")).jpg
done
